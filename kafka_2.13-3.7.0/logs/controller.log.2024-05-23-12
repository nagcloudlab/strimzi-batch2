[2024-05-23 12:03:08,710] INFO [Controller id=101] Processing automatic preferred replica leader election (kafka.controller.KafkaController)
[2024-05-23 12:03:08,711] TRACE [Controller id=101] Checking need to trigger auto leader balancing (kafka.controller.KafkaController)
[2024-05-23 12:03:08,711] DEBUG [Controller id=101] Topics not in preferred replica for broker 101 Map() (kafka.controller.KafkaController)
[2024-05-23 12:03:08,711] TRACE [Controller id=101] Leader imbalance ratio for broker 101 is 0.0 (kafka.controller.KafkaController)
[2024-05-23 12:03:08,711] DEBUG [Controller id=101] Topics not in preferred replica for broker 102 Map() (kafka.controller.KafkaController)
[2024-05-23 12:03:08,711] TRACE [Controller id=101] Leader imbalance ratio for broker 102 is 0.0 (kafka.controller.KafkaController)
[2024-05-23 12:03:08,712] DEBUG [Controller id=101] Topics not in preferred replica for broker 103 Map() (kafka.controller.KafkaController)
[2024-05-23 12:03:08,712] TRACE [Controller id=101] Leader imbalance ratio for broker 103 is 0.0 (kafka.controller.KafkaController)
[2024-05-23 12:08:08,712] INFO [Controller id=101] Processing automatic preferred replica leader election (kafka.controller.KafkaController)
[2024-05-23 12:08:08,712] TRACE [Controller id=101] Checking need to trigger auto leader balancing (kafka.controller.KafkaController)
[2024-05-23 12:08:08,712] DEBUG [Controller id=101] Topics not in preferred replica for broker 101 Map() (kafka.controller.KafkaController)
[2024-05-23 12:08:08,713] TRACE [Controller id=101] Leader imbalance ratio for broker 101 is 0.0 (kafka.controller.KafkaController)
[2024-05-23 12:08:08,713] DEBUG [Controller id=101] Topics not in preferred replica for broker 102 Map() (kafka.controller.KafkaController)
[2024-05-23 12:08:08,713] TRACE [Controller id=101] Leader imbalance ratio for broker 102 is 0.0 (kafka.controller.KafkaController)
[2024-05-23 12:08:08,713] DEBUG [Controller id=101] Topics not in preferred replica for broker 103 Map() (kafka.controller.KafkaController)
[2024-05-23 12:08:08,713] TRACE [Controller id=101] Leader imbalance ratio for broker 103 is 0.0 (kafka.controller.KafkaController)
[2024-05-23 12:08:29,445] DEBUG [Controller id=101] Delete topics listener fired for topics topic1 to be deleted (kafka.controller.KafkaController)
[2024-05-23 12:08:29,445] INFO [Controller id=101] Starting topic deletion for topics topic1 (kafka.controller.KafkaController)
[2024-05-23 12:08:29,446] INFO [Topic Deletion Manager 101] Handling deletion for topics topic1 (kafka.controller.TopicDeletionManager)
[2024-05-23 12:08:29,447] INFO [Topic Deletion Manager 101] Deletion of topic topic1 (re)started (kafka.controller.TopicDeletionManager)
[2024-05-23 12:08:29,449] INFO [RequestSendThread controllerId=101] Controller 101 connected to localhost:9092 (id: 101 rack: null) for sending state change requests (kafka.controller.RequestSendThread)
[2024-05-23 12:08:29,449] INFO [RequestSendThread controllerId=101] Controller 101 connected to localhost:9093 (id: 102 rack: null) for sending state change requests (kafka.controller.RequestSendThread)
[2024-05-23 12:08:29,449] INFO [RequestSendThread controllerId=101] Controller 101 connected to localhost:9094 (id: 103 rack: null) for sending state change requests (kafka.controller.RequestSendThread)
[2024-05-23 12:08:29,498] DEBUG [Controller id=101] Delete topic callback invoked on StopReplica response received from broker 101: request error = NONE, partition errors = Map(topic1-1 -> NONE, topic1-0 -> NONE, topic1-2 -> NONE) (kafka.controller.KafkaController)
[2024-05-23 12:08:29,499] DEBUG [Topic Deletion Manager 101] Deletion successfully completed for replicas [Topic=topic1,Partition=1,Replica=101],[Topic=topic1,Partition=0,Replica=101],[Topic=topic1,Partition=2,Replica=101] (kafka.controller.TopicDeletionManager)
[2024-05-23 12:08:29,499] INFO [Topic Deletion Manager 101] Handling deletion for topics topic1 (kafka.controller.TopicDeletionManager)
[2024-05-23 12:08:29,510] DEBUG [Controller id=101] Delete topic callback invoked on StopReplica response received from broker 103: request error = NONE, partition errors = Map(topic1-1 -> NONE, topic1-0 -> NONE, topic1-2 -> NONE) (kafka.controller.KafkaController)
[2024-05-23 12:08:29,510] DEBUG [Topic Deletion Manager 101] Deletion successfully completed for replicas [Topic=topic1,Partition=1,Replica=103],[Topic=topic1,Partition=0,Replica=103],[Topic=topic1,Partition=2,Replica=103] (kafka.controller.TopicDeletionManager)
[2024-05-23 12:08:29,510] INFO [Topic Deletion Manager 101] Handling deletion for topics topic1 (kafka.controller.TopicDeletionManager)
[2024-05-23 12:08:29,511] DEBUG [Controller id=101] Delete topic callback invoked on StopReplica response received from broker 102: request error = NONE, partition errors = Map(topic1-1 -> NONE, topic1-0 -> NONE, topic1-2 -> NONE) (kafka.controller.KafkaController)
[2024-05-23 12:08:29,511] DEBUG [Topic Deletion Manager 101] Deletion successfully completed for replicas [Topic=topic1,Partition=1,Replica=102],[Topic=topic1,Partition=0,Replica=102],[Topic=topic1,Partition=2,Replica=102] (kafka.controller.TopicDeletionManager)
[2024-05-23 12:08:29,511] INFO [Topic Deletion Manager 101] Handling deletion for topics topic1 (kafka.controller.TopicDeletionManager)
[2024-05-23 12:08:29,524] INFO [Topic Deletion Manager 101] Deletion of topic topic1 successfully completed (kafka.controller.TopicDeletionManager)
[2024-05-23 12:08:29,525] INFO [Controller id=101] New topics: [Set()], deleted topics: [HashSet()], new partition replica assignment [Set()] (kafka.controller.KafkaController)
[2024-05-23 12:08:29,525] DEBUG [Controller id=101] Delete topics listener fired for topics  to be deleted (kafka.controller.KafkaController)
[2024-05-23 12:08:51,838] INFO [Controller id=101] New topics: [Set(topic1)], deleted topics: [HashSet()], new partition replica assignment [Set(TopicIdReplicaAssignment(topic1,Some(2eITCMuqScS2lXxHkWcSIw),Map(topic1-0 -> ReplicaAssignment(replicas=103,101,102, addingReplicas=, removingReplicas=), topic1-1 -> ReplicaAssignment(replicas=102,103,101, addingReplicas=, removingReplicas=), topic1-2 -> ReplicaAssignment(replicas=101,102,103, addingReplicas=, removingReplicas=))))] (kafka.controller.KafkaController)
[2024-05-23 12:08:51,838] INFO [Controller id=101] New partition creation callback for topic1-0,topic1-1,topic1-2 (kafka.controller.KafkaController)
[2024-05-23 12:13:08,713] INFO [Controller id=101] Processing automatic preferred replica leader election (kafka.controller.KafkaController)
[2024-05-23 12:13:08,713] TRACE [Controller id=101] Checking need to trigger auto leader balancing (kafka.controller.KafkaController)
[2024-05-23 12:13:08,713] DEBUG [Controller id=101] Topics not in preferred replica for broker 101 Map() (kafka.controller.KafkaController)
[2024-05-23 12:13:08,713] TRACE [Controller id=101] Leader imbalance ratio for broker 101 is 0.0 (kafka.controller.KafkaController)
[2024-05-23 12:13:08,713] DEBUG [Controller id=101] Topics not in preferred replica for broker 102 Map() (kafka.controller.KafkaController)
[2024-05-23 12:13:08,713] TRACE [Controller id=101] Leader imbalance ratio for broker 102 is 0.0 (kafka.controller.KafkaController)
[2024-05-23 12:13:08,713] DEBUG [Controller id=101] Topics not in preferred replica for broker 103 Map() (kafka.controller.KafkaController)
[2024-05-23 12:13:08,713] TRACE [Controller id=101] Leader imbalance ratio for broker 103 is 0.0 (kafka.controller.KafkaController)
[2024-05-23 12:18:08,714] INFO [Controller id=101] Processing automatic preferred replica leader election (kafka.controller.KafkaController)
[2024-05-23 12:18:08,714] TRACE [Controller id=101] Checking need to trigger auto leader balancing (kafka.controller.KafkaController)
[2024-05-23 12:18:08,714] DEBUG [Controller id=101] Topics not in preferred replica for broker 101 Map() (kafka.controller.KafkaController)
[2024-05-23 12:18:08,714] TRACE [Controller id=101] Leader imbalance ratio for broker 101 is 0.0 (kafka.controller.KafkaController)
[2024-05-23 12:18:08,714] DEBUG [Controller id=101] Topics not in preferred replica for broker 102 Map() (kafka.controller.KafkaController)
[2024-05-23 12:18:08,714] TRACE [Controller id=101] Leader imbalance ratio for broker 102 is 0.0 (kafka.controller.KafkaController)
[2024-05-23 12:18:08,714] DEBUG [Controller id=101] Topics not in preferred replica for broker 103 Map() (kafka.controller.KafkaController)
[2024-05-23 12:18:08,714] TRACE [Controller id=101] Leader imbalance ratio for broker 103 is 0.0 (kafka.controller.KafkaController)
[2024-05-23 12:22:56,177] INFO [Controller id=101] New topics: [Set(__consumer_offsets)], deleted topics: [HashSet()], new partition replica assignment [Set(TopicIdReplicaAssignment(__consumer_offsets,Some(cW0YiuPLSoCHlBTfcqVn1A),HashMap(__consumer_offsets-22 -> ReplicaAssignment(replicas=102, addingReplicas=, removingReplicas=), __consumer_offsets-30 -> ReplicaAssignment(replicas=103, addingReplicas=, removingReplicas=), __consumer_offsets-25 -> ReplicaAssignment(replicas=102, addingReplicas=, removingReplicas=), __consumer_offsets-35 -> ReplicaAssignment(replicas=101, addingReplicas=, removingReplicas=), __consumer_offsets-37 -> ReplicaAssignment(replicas=102, addingReplicas=, removingReplicas=), __consumer_offsets-38 -> ReplicaAssignment(replicas=101, addingReplicas=, removingReplicas=), __consumer_offsets-13 -> ReplicaAssignment(replicas=102, addingReplicas=, removingReplicas=), __consumer_offsets-8 -> ReplicaAssignment(replicas=101, addingReplicas=, removingReplicas=), __consumer_offsets-21 -> ReplicaAssignment(replicas=103, addingReplicas=, removingReplicas=), __consumer_offsets-4 -> ReplicaAssignment(replicas=102, addingReplicas=, removingReplicas=), __consumer_offsets-27 -> ReplicaAssignment(replicas=103, addingReplicas=, removingReplicas=), __consumer_offsets-7 -> ReplicaAssignment(replicas=102, addingReplicas=, removingReplicas=), __consumer_offsets-9 -> ReplicaAssignment(replicas=103, addingReplicas=, removingReplicas=), __consumer_offsets-46 -> ReplicaAssignment(replicas=102, addingReplicas=, removingReplicas=), __consumer_offsets-41 -> ReplicaAssignment(replicas=101, addingReplicas=, removingReplicas=), __consumer_offsets-33 -> ReplicaAssignment(replicas=103, addingReplicas=, removingReplicas=), __consumer_offsets-23 -> ReplicaAssignment(replicas=101, addingReplicas=, removingReplicas=), __consumer_offsets-49 -> ReplicaAssignment(replicas=102, addingReplicas=, removingReplicas=), __consumer_offsets-47 -> ReplicaAssignment(replicas=101, addingReplicas=, removingReplicas=), __consumer_offsets-16 -> ReplicaAssignment(replicas=102, addingReplicas=, removingReplicas=), __consumer_offsets-28 -> ReplicaAssignment(replicas=102, addingReplicas=, removingReplicas=), __consumer_offsets-31 -> ReplicaAssignment(replicas=102, addingReplicas=, removingReplicas=), __consumer_offsets-36 -> ReplicaAssignment(replicas=103, addingReplicas=, removingReplicas=), __consumer_offsets-42 -> ReplicaAssignment(replicas=103, addingReplicas=, removingReplicas=), __consumer_offsets-3 -> ReplicaAssignment(replicas=103, addingReplicas=, removingReplicas=), __consumer_offsets-18 -> ReplicaAssignment(replicas=103, addingReplicas=, removingReplicas=), __consumer_offsets-15 -> ReplicaAssignment(replicas=103, addingReplicas=, removingReplicas=), __consumer_offsets-24 -> ReplicaAssignment(replicas=103, addingReplicas=, removingReplicas=), __consumer_offsets-17 -> ReplicaAssignment(replicas=101, addingReplicas=, removingReplicas=), __consumer_offsets-48 -> ReplicaAssignment(replicas=103, addingReplicas=, removingReplicas=), __consumer_offsets-19 -> ReplicaAssignment(replicas=102, addingReplicas=, removingReplicas=), __consumer_offsets-11 -> ReplicaAssignment(replicas=101, addingReplicas=, removingReplicas=), __consumer_offsets-2 -> ReplicaAssignment(replicas=101, addingReplicas=, removingReplicas=), __consumer_offsets-43 -> ReplicaAssignment(replicas=102, addingReplicas=, removingReplicas=), __consumer_offsets-6 -> ReplicaAssignment(replicas=103, addingReplicas=, removingReplicas=), __consumer_offsets-14 -> ReplicaAssignment(replicas=101, addingReplicas=, removingReplicas=), __consumer_offsets-20 -> ReplicaAssignment(replicas=101, addingReplicas=, removingReplicas=), __consumer_offsets-0 -> ReplicaAssignment(replicas=103, addingReplicas=, removingReplicas=), __consumer_offsets-44 -> ReplicaAssignment(replicas=101, addingReplicas=, removingReplicas=), __consumer_offsets-39 -> ReplicaAssignment(replicas=103, addingReplicas=, removingReplicas=), __consumer_offsets-12 -> ReplicaAssignment(replicas=103, addingReplicas=, removingReplicas=), __consumer_offsets-45 -> ReplicaAssignment(replicas=103, addingReplicas=, removingReplicas=), __consumer_offsets-1 -> ReplicaAssignment(replicas=102, addingReplicas=, removingReplicas=), __consumer_offsets-5 -> ReplicaAssignment(replicas=101, addingReplicas=, removingReplicas=), __consumer_offsets-26 -> ReplicaAssignment(replicas=101, addingReplicas=, removingReplicas=), __consumer_offsets-29 -> ReplicaAssignment(replicas=101, addingReplicas=, removingReplicas=), __consumer_offsets-34 -> ReplicaAssignment(replicas=102, addingReplicas=, removingReplicas=), __consumer_offsets-10 -> ReplicaAssignment(replicas=102, addingReplicas=, removingReplicas=), __consumer_offsets-32 -> ReplicaAssignment(replicas=101, addingReplicas=, removingReplicas=), __consumer_offsets-40 -> ReplicaAssignment(replicas=102, addingReplicas=, removingReplicas=))))] (kafka.controller.KafkaController)
[2024-05-23 12:22:56,177] INFO [Controller id=101] New partition creation callback for __consumer_offsets-22,__consumer_offsets-30,__consumer_offsets-25,__consumer_offsets-35,__consumer_offsets-37,__consumer_offsets-38,__consumer_offsets-13,__consumer_offsets-8,__consumer_offsets-21,__consumer_offsets-4,__consumer_offsets-27,__consumer_offsets-7,__consumer_offsets-9,__consumer_offsets-46,__consumer_offsets-41,__consumer_offsets-33,__consumer_offsets-23,__consumer_offsets-49,__consumer_offsets-47,__consumer_offsets-16,__consumer_offsets-28,__consumer_offsets-31,__consumer_offsets-36,__consumer_offsets-42,__consumer_offsets-3,__consumer_offsets-18,__consumer_offsets-15,__consumer_offsets-24,__consumer_offsets-17,__consumer_offsets-48,__consumer_offsets-19,__consumer_offsets-11,__consumer_offsets-2,__consumer_offsets-43,__consumer_offsets-6,__consumer_offsets-14,__consumer_offsets-20,__consumer_offsets-0,__consumer_offsets-44,__consumer_offsets-39,__consumer_offsets-12,__consumer_offsets-45,__consumer_offsets-1,__consumer_offsets-5,__consumer_offsets-26,__consumer_offsets-29,__consumer_offsets-34,__consumer_offsets-10,__consumer_offsets-32,__consumer_offsets-40 (kafka.controller.KafkaController)
[2024-05-23 12:22:56,205] INFO [RequestSendThread controllerId=101] Controller 101 connected to localhost:9093 (id: 102 rack: null) for sending state change requests (kafka.controller.RequestSendThread)
[2024-05-23 12:22:56,205] INFO [RequestSendThread controllerId=101] Controller 101 connected to localhost:9092 (id: 101 rack: null) for sending state change requests (kafka.controller.RequestSendThread)
[2024-05-23 12:22:56,205] INFO [RequestSendThread controllerId=101] Controller 101 connected to localhost:9094 (id: 103 rack: null) for sending state change requests (kafka.controller.RequestSendThread)
[2024-05-23 12:23:08,714] INFO [Controller id=101] Processing automatic preferred replica leader election (kafka.controller.KafkaController)
[2024-05-23 12:23:08,715] TRACE [Controller id=101] Checking need to trigger auto leader balancing (kafka.controller.KafkaController)
[2024-05-23 12:23:08,717] DEBUG [Controller id=101] Topics not in preferred replica for broker 101 HashMap() (kafka.controller.KafkaController)
[2024-05-23 12:23:08,717] TRACE [Controller id=101] Leader imbalance ratio for broker 101 is 0.0 (kafka.controller.KafkaController)
[2024-05-23 12:23:08,718] DEBUG [Controller id=101] Topics not in preferred replica for broker 102 HashMap() (kafka.controller.KafkaController)
[2024-05-23 12:23:08,718] TRACE [Controller id=101] Leader imbalance ratio for broker 102 is 0.0 (kafka.controller.KafkaController)
[2024-05-23 12:23:08,718] DEBUG [Controller id=101] Topics not in preferred replica for broker 103 HashMap() (kafka.controller.KafkaController)
[2024-05-23 12:23:08,718] TRACE [Controller id=101] Leader imbalance ratio for broker 103 is 0.0 (kafka.controller.KafkaController)
[2024-05-23 12:28:08,718] INFO [Controller id=101] Processing automatic preferred replica leader election (kafka.controller.KafkaController)
[2024-05-23 12:28:08,718] TRACE [Controller id=101] Checking need to trigger auto leader balancing (kafka.controller.KafkaController)
[2024-05-23 12:28:08,720] DEBUG [Controller id=101] Topics not in preferred replica for broker 101 HashMap() (kafka.controller.KafkaController)
[2024-05-23 12:28:08,720] TRACE [Controller id=101] Leader imbalance ratio for broker 101 is 0.0 (kafka.controller.KafkaController)
[2024-05-23 12:28:08,720] DEBUG [Controller id=101] Topics not in preferred replica for broker 102 HashMap() (kafka.controller.KafkaController)
[2024-05-23 12:28:08,720] TRACE [Controller id=101] Leader imbalance ratio for broker 102 is 0.0 (kafka.controller.KafkaController)
[2024-05-23 12:28:08,720] DEBUG [Controller id=101] Topics not in preferred replica for broker 103 HashMap() (kafka.controller.KafkaController)
[2024-05-23 12:28:08,720] TRACE [Controller id=101] Leader imbalance ratio for broker 103 is 0.0 (kafka.controller.KafkaController)
[2024-05-23 12:33:08,721] INFO [Controller id=101] Processing automatic preferred replica leader election (kafka.controller.KafkaController)
[2024-05-23 12:33:08,721] TRACE [Controller id=101] Checking need to trigger auto leader balancing (kafka.controller.KafkaController)
[2024-05-23 12:33:08,722] DEBUG [Controller id=101] Topics not in preferred replica for broker 101 HashMap() (kafka.controller.KafkaController)
[2024-05-23 12:33:08,722] TRACE [Controller id=101] Leader imbalance ratio for broker 101 is 0.0 (kafka.controller.KafkaController)
[2024-05-23 12:33:08,722] DEBUG [Controller id=101] Topics not in preferred replica for broker 102 HashMap() (kafka.controller.KafkaController)
[2024-05-23 12:33:08,722] TRACE [Controller id=101] Leader imbalance ratio for broker 102 is 0.0 (kafka.controller.KafkaController)
[2024-05-23 12:33:08,722] DEBUG [Controller id=101] Topics not in preferred replica for broker 103 HashMap() (kafka.controller.KafkaController)
[2024-05-23 12:33:08,722] TRACE [Controller id=101] Leader imbalance ratio for broker 103 is 0.0 (kafka.controller.KafkaController)
[2024-05-23 12:38:08,722] INFO [Controller id=101] Processing automatic preferred replica leader election (kafka.controller.KafkaController)
[2024-05-23 12:38:08,722] TRACE [Controller id=101] Checking need to trigger auto leader balancing (kafka.controller.KafkaController)
[2024-05-23 12:38:08,723] DEBUG [Controller id=101] Topics not in preferred replica for broker 101 HashMap() (kafka.controller.KafkaController)
[2024-05-23 12:38:08,723] TRACE [Controller id=101] Leader imbalance ratio for broker 101 is 0.0 (kafka.controller.KafkaController)
[2024-05-23 12:38:08,723] DEBUG [Controller id=101] Topics not in preferred replica for broker 102 HashMap() (kafka.controller.KafkaController)
[2024-05-23 12:38:08,723] TRACE [Controller id=101] Leader imbalance ratio for broker 102 is 0.0 (kafka.controller.KafkaController)
[2024-05-23 12:38:08,723] DEBUG [Controller id=101] Topics not in preferred replica for broker 103 HashMap() (kafka.controller.KafkaController)
[2024-05-23 12:38:08,723] TRACE [Controller id=101] Leader imbalance ratio for broker 103 is 0.0 (kafka.controller.KafkaController)
[2024-05-23 12:43:08,723] INFO [Controller id=101] Processing automatic preferred replica leader election (kafka.controller.KafkaController)
[2024-05-23 12:43:08,723] TRACE [Controller id=101] Checking need to trigger auto leader balancing (kafka.controller.KafkaController)
[2024-05-23 12:43:08,723] DEBUG [Controller id=101] Topics not in preferred replica for broker 101 HashMap() (kafka.controller.KafkaController)
[2024-05-23 12:43:08,723] TRACE [Controller id=101] Leader imbalance ratio for broker 101 is 0.0 (kafka.controller.KafkaController)
[2024-05-23 12:43:08,723] DEBUG [Controller id=101] Topics not in preferred replica for broker 102 HashMap() (kafka.controller.KafkaController)
[2024-05-23 12:43:08,723] TRACE [Controller id=101] Leader imbalance ratio for broker 102 is 0.0 (kafka.controller.KafkaController)
[2024-05-23 12:43:08,723] DEBUG [Controller id=101] Topics not in preferred replica for broker 103 HashMap() (kafka.controller.KafkaController)
[2024-05-23 12:43:08,723] TRACE [Controller id=101] Leader imbalance ratio for broker 103 is 0.0 (kafka.controller.KafkaController)
[2024-05-23 12:48:08,724] INFO [Controller id=101] Processing automatic preferred replica leader election (kafka.controller.KafkaController)
[2024-05-23 12:48:08,724] TRACE [Controller id=101] Checking need to trigger auto leader balancing (kafka.controller.KafkaController)
[2024-05-23 12:48:08,725] DEBUG [Controller id=101] Topics not in preferred replica for broker 101 HashMap() (kafka.controller.KafkaController)
[2024-05-23 12:48:08,725] TRACE [Controller id=101] Leader imbalance ratio for broker 101 is 0.0 (kafka.controller.KafkaController)
[2024-05-23 12:48:08,725] DEBUG [Controller id=101] Topics not in preferred replica for broker 102 HashMap() (kafka.controller.KafkaController)
[2024-05-23 12:48:08,725] TRACE [Controller id=101] Leader imbalance ratio for broker 102 is 0.0 (kafka.controller.KafkaController)
[2024-05-23 12:48:08,725] DEBUG [Controller id=101] Topics not in preferred replica for broker 103 HashMap() (kafka.controller.KafkaController)
[2024-05-23 12:48:08,725] TRACE [Controller id=101] Leader imbalance ratio for broker 103 is 0.0 (kafka.controller.KafkaController)
[2024-05-23 12:53:08,726] INFO [Controller id=101] Processing automatic preferred replica leader election (kafka.controller.KafkaController)
[2024-05-23 12:53:08,726] TRACE [Controller id=101] Checking need to trigger auto leader balancing (kafka.controller.KafkaController)
[2024-05-23 12:53:08,727] DEBUG [Controller id=101] Topics not in preferred replica for broker 101 HashMap() (kafka.controller.KafkaController)
[2024-05-23 12:53:08,727] TRACE [Controller id=101] Leader imbalance ratio for broker 101 is 0.0 (kafka.controller.KafkaController)
[2024-05-23 12:53:08,727] DEBUG [Controller id=101] Topics not in preferred replica for broker 102 HashMap() (kafka.controller.KafkaController)
[2024-05-23 12:53:08,727] TRACE [Controller id=101] Leader imbalance ratio for broker 102 is 0.0 (kafka.controller.KafkaController)
[2024-05-23 12:53:08,727] DEBUG [Controller id=101] Topics not in preferred replica for broker 103 HashMap() (kafka.controller.KafkaController)
[2024-05-23 12:53:08,727] TRACE [Controller id=101] Leader imbalance ratio for broker 103 is 0.0 (kafka.controller.KafkaController)
[2024-05-23 12:58:08,727] INFO [Controller id=101] Processing automatic preferred replica leader election (kafka.controller.KafkaController)
[2024-05-23 12:58:08,727] TRACE [Controller id=101] Checking need to trigger auto leader balancing (kafka.controller.KafkaController)
[2024-05-23 12:58:08,728] DEBUG [Controller id=101] Topics not in preferred replica for broker 101 HashMap() (kafka.controller.KafkaController)
[2024-05-23 12:58:08,728] TRACE [Controller id=101] Leader imbalance ratio for broker 101 is 0.0 (kafka.controller.KafkaController)
[2024-05-23 12:58:08,728] DEBUG [Controller id=101] Topics not in preferred replica for broker 102 HashMap() (kafka.controller.KafkaController)
[2024-05-23 12:58:08,728] TRACE [Controller id=101] Leader imbalance ratio for broker 102 is 0.0 (kafka.controller.KafkaController)
[2024-05-23 12:58:08,728] DEBUG [Controller id=101] Topics not in preferred replica for broker 103 HashMap() (kafka.controller.KafkaController)
[2024-05-23 12:58:08,728] TRACE [Controller id=101] Leader imbalance ratio for broker 103 is 0.0 (kafka.controller.KafkaController)
